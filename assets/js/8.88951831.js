(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{270:function(i,t,v){"use strict";v.r(t);var s=v(0),g=Object(s.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var i=this,t=i.$createElement,v=i._self._c||t;return v("div",{staticClass:"content"},[v("h2",{attrs:{id:"工作中常用的git命令"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#工作中常用的git命令","aria-hidden":"true"}},[i._v("#")]),i._v(" 工作中常用的git命令")]),i._v(" "),v("p",[i._v("    Git是一个开源的分布式版本控制系统,用于敏捷高效地处理任何或小或大的项目.下面罗列写一些工作中经常使用到的git命令."),v("br")]),i._v(" "),v("h3",{attrs:{id:"git命令"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#git命令","aria-hidden":"true"}},[i._v("#")]),i._v(" git命令")]),i._v(" "),v("ul",[v("li",[i._v("git clone git@github.com:ZjBlog/blog.git 把远程仓库的项目复制下来")]),i._v(" "),v("li",[i._v("git init 空项目进行初始化操作")]),i._v(" "),v("li",[i._v("git remote add origin git@github.com:ZjBlog/ZjBlog.github.io.git 对新项目添加远程仓库地址")]),i._v(" "),v("li",[i._v("git pull origin master 添加完远程仓库后首次拉取远程仓库的代码")]),i._v(" "),v("li",[i._v("git add . 把改动的文件提交到暂存区")]),i._v(" "),v("li",[i._v("git commit -m 'message' 本次提交的描述")]),i._v(" "),v("li",[i._v("git reset --hard HEAD^ 回退本次commit到原来的样子,修改的代码会回退 回退上个版本 HEAD^^上两个版本^^^类推")]),i._v(" "),v("li",[i._v("git reset --hard commit id 回退到指定版本")]),i._v(" "),v("li",[i._v("git reset --soft HEAD^ 回退到未commit的样子，修改的代码还在")]),i._v(" "),v("li",[i._v("git push origin master 将自己本机的代码库推送到远端")]),i._v(" "),v("li",[i._v("git branch --set-upstream-to=origin/master master 本地master分支和远程master分支建立关系,之后可以直接使用git pull 和git push不用再指定分支")]),i._v(" "),v("li",[i._v("git branch 查看本地分支 有*的是当前的分支")]),i._v(" "),v("li",[i._v("git branch -av 查看本地和远程的所有分支")]),i._v(" "),v("li",[i._v("git checkout dev 切换分支")]),i._v(" "),v("li",[i._v("git branch dev 创建分支")]),i._v(" "),v("li",[i._v("git checkout -b dev 创建dev分支并切换到dev分支是上边两个的简写")]),i._v(" "),v("li",[i._v("git branch -D dev 删除dev分支")]),i._v(" "),v("li",[i._v("git push origin dev:dev 远程新建dev分支")]),i._v(" "),v("li",[i._v("git push origin :dev 删除远程dev分支")]),i._v(" "),v("li",[i._v("git remote show origin 查看远程仓库地址")]),i._v(" "),v("li",[i._v("git remote set-url origin 新的仓库地址   为项目切换新的远程仓库")]),i._v(" "),v("li",[i._v("git remote prune origin 清理远程仓库已经删除的分支")]),i._v(" "),v("li",[i._v("git merge --no-ff dev 把dev分支合并到当前分支")]),i._v(" "),v("li",[i._v("git merge --abort 取消合并")]),i._v(" "),v("li",[i._v("git merge -X ours/theirs 合并策略")]),i._v(" "),v("li",[i._v("git stash 有的时候代码没写完,不commit是不能切换分支的,此命令可以把当前改变的文件存储起来,之后你就可以切换分支了")]),i._v(" "),v("li",[i._v("git stash pop 当在其它分支切换回来时,使用此命令可以还原原来保存的状态,写的代码还在 缓存堆栈中的第一个stash删除，并将对应修改应用到当前的工作目录下")]),i._v(" "),v("li",[i._v("git stash stash{0} 回到指定暂存版本")]),i._v(" "),v("li",[i._v("git stash drop stash{0}移除指定的储藏")]),i._v(" "),v("li",[i._v("git stash list 查看存储的历史")]),i._v(" "),v("li",[i._v("git stash clear 清楚存储")]),i._v(" "),v("li",[i._v('git stash 是 git stash save "测试" 的简写  把当前修改的暂存起来')]),i._v(" "),v("li",[i._v("git stash apply stash{0} 应用到那个stash，并不删除stash")]),i._v(" "),v("li",[i._v("git config --global alias.stash-unapply '!git stash show -p | git apply -R' Git没有提供类似于 stash unapply 的命令 配置这个可以达到取消储藏的效果 git stash-unapply 是git stash apply的反操作")]),i._v(" "),v("li",[i._v("git stash show stash{0} 查看改变的东西 -p   相当于diff")]),i._v(" "),v("li",[i._v("git tag -a v1.0 -m '1.0版本' 打标签")]),i._v(" "),v("li",[i._v("git tag -d v1.0 删除标签")]),i._v(" "),v("li",[i._v("git tag 产看现有标签")]),i._v(" "),v("li",[i._v("git push origin --tags 把本地所有tag推送到远程")]),i._v(" "),v("li",[i._v("git push origin :refs/tags/v1.0 删除远程v1.0标签")]),i._v(" "),v("li",[i._v("git checkout -b users tag 拉取远程标签并创建users分支")]),i._v(" "),v("li",[i._v("git rm -r --cache . 当修改.gitignore后不生效,执行此命令,在执行git add . git commit -m 就ok了")]),i._v(" "),v("li",[i._v("git log 产看提交记录")]),i._v(" "),v("li",[i._v("git commit --amend 我们经常会在提交的时候拼写错误或者填入一些错误的信息，我们可以使用此命令")]),i._v(" "),v("li",[i._v("git commit --amend 然后在使用git push --force 如果你想修改已经提交的过的 commit信息的话")]),i._v(" "),v("li",[i._v("git pull -X theirs  或者 git checkout --theirs path/to/file或者git pull -X ours merge的时候,有的时候我们如果可以很明确使用意向的话,比如使用他人或者自己的话我们可以使用此命令")]),i._v(" "),v("li",[i._v("git config --global core.editor vim  修改默认的编辑器为vim")])])])}],!1,null,null,null);t.default=g.exports}}]);